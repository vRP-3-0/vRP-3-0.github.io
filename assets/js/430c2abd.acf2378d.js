"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5203],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>k});var n=r(7294);function s(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){s(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,s=function(e,t){if(null==e)return{};var r,n,s={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(s[r]=e[r]);return s}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(s[r]=e[r])}return s}var u=n.createContext({}),o=function(e){var t=n.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},c=function(e){var t=o(e.components);return n.createElement(u.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},v=n.forwardRef((function(e,t){var r=e.components,s=e.mdxType,a=e.originalType,u=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=o(r),v=s,k=d["".concat(u,".").concat(v)]||d[v]||p[v]||a;return r?n.createElement(k,l(l({ref:t},c),{},{components:r})):n.createElement(k,l({ref:t},c))}));function k(e,t){var r=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var a=r.length,l=new Array(a);l[0]=v;var i={};for(var u in t)hasOwnProperty.call(t,u)&&(i[u]=t[u]);i.originalType=e,i[d]="string"==typeof e?e:s,l[1]=i;for(var o=2;o<a;o++)l[o]=r[o];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}v.displayName="MDXCreateElement"},5358:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>o});var n=r(7462),s=(r(7294),r(3905));const a={sidebar_position:1},l=void 0,i={unversionedId:"vRP-server/User/User",id:"vRP-server/User/User",title:"User",description:"Get User ID",source:"@site/docs/vRP-server/User/User.md",sourceDirName:"vRP-server/User",slug:"/vRP-server/User/",permalink:"/docs/vRP-server/User/",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/vRP-server/User/User.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Server - User",permalink:"/docs/category/server---user"},next:{title:"Userdata",permalink:"/docs/vRP-server/User/Userdata"}},u={},o=[{value:"Get User ID",id:"get-user-id",level:2},{value:"Get User Source",id:"get-user-source",level:2},{value:"Get All Users",id:"get-all-users",level:2},{value:"User Kick",id:"user-kick",level:2},{value:"User Ban",id:"user-ban",level:2},{value:"User Is banned",id:"user-is-banned",level:2},{value:"Set User Banned",id:"set-user-banned",level:2},{value:"User Is Whitelisted",id:"user-is-whitelisted",level:2},{value:"Set User Whitelist",id:"set-user-whitelist",level:2},{value:"Is User Connected",id:"is-user-connected",level:2},{value:"User First Spawn",id:"user-first-spawn",level:2}],c={toc:o},d="wrapper";function p(e){let{components:t,...r}=e;return(0,s.kt)(d,(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"get-user-id"},"Get User ID"),(0,s.kt)("p",null,"Gets the users vRP id"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-lua"},"local user_id = vRP.getUserId(source)\n")),(0,s.kt)("h2",{id:"get-user-source"},"Get User Source"),(0,s.kt)("p",null,"If only the user id is available you can get the source by: "),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-lua"},"local user_source = vRP.getUserSource(user_id)\n")),(0,s.kt)("h2",{id:"get-all-users"},"Get All Users"),(0,s.kt)("p",null,"Gets a table with all users"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-lua"},'local users = vRP.getUsers()\nprint(json.encode(users)) -- Output: ["user_id": source]\n')),(0,s.kt)("h2",{id:"user-kick"},"User Kick"),(0,s.kt)("p",null,"Kicks a user from the server"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-lua"},'vRP.kick(source, "You have been kicked for being very naughty")\n')),(0,s.kt)("h2",{id:"user-ban"},"User Ban"),(0,s.kt)("p",null,"This bans and kicks the user if they are online"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-lua"},'vRP.ban(user_id, "Don\'t do things like that dummy") \n')),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"What the banned people see:"),"\n","[Banned]"," - Reason\n(UserId: 1)"),(0,s.kt)("h2",{id:"user-is-banned"},"User Is banned"),(0,s.kt)("p",null,"Check if the user is banned with Async/sync functions"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Async:")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-lua"},"vRP.isBanned(user_id, function(isBanned)\n    print(isBanned) -- Returns either true / false (nil if not found)\nend)\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Sync:")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-lua"},"local isBanned = vRP.isBanned(user_id)\nprint(isBanned) -- Returns either true / false (nil if not found)\n")),(0,s.kt)("h2",{id:"set-user-banned"},"Set User Banned"),(0,s.kt)("p",null,"Set the user's banned status with a simple command"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-lua"},"local banned = true -- true/false\n\nvRP.setBanned(user_id, banned)\n")),(0,s.kt)("h2",{id:"user-is-whitelisted"},"User Is Whitelisted"),(0,s.kt)("p",null,"Check if the user is whitelisted with Async/sync functions\n",(0,s.kt)("strong",{parentName:"p"},"Async:")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-lua"},"vRP.isWhitelisted(user_id, function(isWhitelisted)\n    print(isWhitelisted) -- Returns either true / false (nil if not found)\nend)\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Sync:")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-lua"},"local isWhitelisted = vRP.isWhitelisted(user_id)\nprint(isWhitelisted) -- Returns either true / false (nil if not found)\n")),(0,s.kt)("h2",{id:"set-user-whitelist"},"Set User Whitelist"),(0,s.kt)("p",null,"Set the user's whitelist with a simple command"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-lua"},"local whitelisted = true -- true/false\n\nvRP.setWhitelisted(user_id, whitelisted)\n")),(0,s.kt)("h2",{id:"is-user-connected"},"Is User Connected"),(0,s.kt)("p",null,"Returns a true/false value if the user is connected to the server and registered"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-lua"},"local isConnected = vRP.isConnected(user_id)\nprint(isConnected) -- Returns true / false\n")),(0,s.kt)("h2",{id:"user-first-spawn"},"User First Spawn"),(0,s.kt)("p",null,"Returns a true/false value if the user had his first spawn"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-lua"},"local isFirstspawn = vRP.isFirstSpawn(user_id)\nprint(isFirstspawn) -- Returns true / false\n")))}p.isMDXComponent=!0}}]);